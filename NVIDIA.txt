model=Sequential()
model.add(Lambda(lambda x: (x / 255.0) - 0.5, input_shape=(160,320,3)))
model.add(Cropping2D(cropping=((70,25),(0,0))))
#model.add(Dense(1))

model.add(Convolution2D(24, 5, 5, subsample=(2,2), activation='relu'))
model.add(Convolution2D(36, 5, 5, subsample=(2,2), activation='relu'))
model.add(Convolution2D(48, 5, 5, subsample=(2,2), activation='relu'))
model.add(Convolution2D(64, 3, 3, activation='relu'))
model.add(Convolution2D(64, 3, 3, activation='relu'))
#model.add(MaxPooling2D())
model.add(Flatten())
model.add(Dense(100))
model.add(Dense(50))
model.add(Dense(10))




+++++++++++++++++++++++++++++++++++++++++
def resize_img(input):
    from keras.backend import tf as ktf
    return ktf.image.resize_images(input, (64, 64))


model.add(Lambda(resize_img))


+++++++++++++++++++++++++++++++++++++++++++++++++++++++
def generator(samples, batch_size=32):
    num_samples = len(samples)
    while 1: # Loop forever so the generator never terminates
        shuffle(samples)
    for offset in range(0, num_samples, batch_size):
        batch_samples = samples[offset:offset+batch_size]
        images = []
        measurements = []
        for batch_sample in batch_samples:
            for j in range(3):
                source_path = batch_sample[j].split('\\')[-1]
                filename = source_path.split('/')[-1]
                local_path = './data/IMG/' + filename
                image = cv2.imread(local_path)
                images.append(image)
            correction = 0.25
            measurement = float(batch_sample[3])
            measurements.append(measurement)
            measurements.append(measurement + correction)
            measurements.append(measurement - correction)

        augmented_images = []
        augmented_measurements = []
        # augment data with flipped version of images and angles
        for image, measurement in zip(images, measurements):
            augmented_images.append(image)
            augmented_measurements.append(measurement)
            flipped_image = cv2.flip(image, 1)
            flipped_measurement = measurement * -1.0
            augmented_images.append(flipped_image)
            augmented_measurements.append(flipped_measurement)

        X_train = np.array(augmented_images)
        y_train = np.array(augmented_measurements)
        yield sklearn.utils.shuffle(X_train, y_train)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

num_training_lines = int(0.8*nrows)
training_lines = image_dataframe.loc[0:num_training_lines-1]
validation_lines = image_dataframe.loc[num_training_lines:]
steer_prob_threshold = 0.5
training_generator = data_generator(training_lines, batch_size)
validation_generator = data_generator(validation_lines, batch_size)
